{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\nconst fetch = require('node-fetch');\n\nimport connections from '../../constants/connections'; // Helpers\n\nimport { omit } from 'ramda';\nexport function setUser(data) {\n  return {\n    type: 'SET_USER',\n    user: data\n  };\n}\nexport function saveNewUser(user) {\n  return (dispatch, getState) => {\n    return new _Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/register`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin',\n        body: _JSON$stringify(user)\n      }).then(resp => resp.json()).then(data => {\n        // console.log('POST NEW USER ::', data)\n        if (data.errno) {\n          reject({\n            error: 'sql error',\n            msg: data.code\n          });\n        } else {\n          dispatch(setUser(omit(['token', 'iduser', 'password'], user)));\n          resolve(omit(['iduser', 'password'], data));\n        }\n      }).catch(err => {\n        // console.log('catch new user ', JSON.stringify(err))\n        reject({\n          msg: 'errore :(',\n          error: err\n        });\n      });\n    });\n  };\n}\nexport function loginUser(username, password) {\n  return dispatch => {\n    return new _Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/login`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin',\n        body: _JSON$stringify({\n          username,\n          password\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.errno) {\n          reject({\n            error: 'sql error',\n            msg: data.code\n          });\n        } else if (_Array$isArray(data.body) && !data.body.length) {\n          reject({\n            msg: 'Email or password incorrect',\n            error: {}\n          });\n        } else {\n          dispatch(setUser(omit(['iduser', 'password'], data.body[0])));\n          resolve(data.body);\n        }\n      }).catch(err => {\n        reject({\n          msg: 'errore :(',\n          error: err\n        });\n      });\n    });\n  };\n}\nexport function autoLogin(token) {\n  return dispatch => {\n    return new _Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/restorelogin`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin',\n        body: _JSON$stringify({\n          token\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.errno) {\n          reject({\n            error: 'sql error',\n            msg: data.code\n          });\n        } else if (_Array$isArray(data.body) && !data.body.length) {\n          reject({\n            msg: 'Email or password incorrect',\n            error: {}\n          });\n        } else {\n          console.log('user !', data.body[0]);\n          dispatch(setUser(omit(['iduser', 'password'], data.body[0])));\n          resolve(data.body);\n        }\n      }).catch(err => {\n        reject({\n          msg: 'errore :(',\n          error: err\n        });\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/aethiss/Web/Projects/freewareIdee/freeware-beta/src/redux/actions/user.js"],"names":["fetch","require","connections","omit","setUser","data","type","user","saveNewUser","dispatch","getState","resolve","reject","HOST","PORT","method","headers","Accept","credentials","body","then","resp","json","errno","error","msg","code","catch","err","loginUser","username","password","length","autoLogin","token","console","log"],"mappings":"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","sourcesContent":["const fetch = require('node-fetch')\n\nimport connections from '../../constants/connections'\n\n// Helpers\nimport { omit } from 'ramda'\n\nexport function setUser(data) {\n  return {\n    type: 'SET_USER',\n    user: data,\n  }\n}\n\nexport function saveNewUser(user) {\n  return (dispatch, getState) => {\n    return new Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/register`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify(user),\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          // console.log('POST NEW USER ::', data)\n          if (data.errno) {\n            reject({ error: 'sql error', msg: data.code })\n          } else {\n            dispatch(setUser(omit(['token', 'iduser', 'password'], user)))\n            resolve(omit(['iduser', 'password'], data))\n          }\n        })\n        .catch(err => {\n          // console.log('catch new user ', JSON.stringify(err))\n          reject({ msg: 'errore :(', error: err })\n        })\n    })\n  }\n}\n\nexport function loginUser(username, password) {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/login`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify({ username, password }),\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.errno) {\n            reject({ error: 'sql error', msg: data.code })\n          } else if (Array.isArray(data.body) && !data.body.length) {\n            reject({ msg: 'Email or password incorrect', error: {} })\n          } else {\n            dispatch(setUser(omit(['iduser', 'password'], data.body[0])))\n            resolve(data.body)\n          }\n        })\n        .catch(err => {\n          reject({ msg: 'errore :(', error: err })\n        })\n    })\n  }\n}\n\nexport function autoLogin(token) {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/restorelogin`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify({ token }),\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.errno) {\n            reject({ error: 'sql error', msg: data.code })\n          } else if (Array.isArray(data.body) && !data.body.length) {\n            reject({ msg: 'Email or password incorrect', error: {} })\n          } else {\n            console.log('user !', data.body[0])\n            dispatch(setUser(omit(['iduser', 'password'], data.body[0])))\n            resolve(data.body)\n          }\n        })\n        .catch(err => {\n          reject({ msg: 'errore :(', error: err })\n        })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}