{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\nconst fetch = require('node-fetch');\n\nimport connections from '../../constants/connections';\nexport function addSkill(skill) {\n  return {\n    type: 'SET_USER',\n    skill\n  };\n}\nexport function addNewSkill(skill, token) {\n  return dispatch => {\n    return new _Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/skill`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin',\n        body: _JSON$stringify({\n          skill,\n          token\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.errno) {\n          reject({\n            error: 'sql error',\n            msg: data.code\n          });\n        } else {\n          console.log('skill added !', data); // dispatch(addSkill(data))\n          // resolve(data)\n        }\n      }).catch(err => {\n        reject({\n          msg: 'errore :(',\n          error: err\n        });\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/aethiss/Web/Projects/freewareIdee/freeware-beta/src/redux/actions/skills.js"],"names":["fetch","require","connections","addSkill","skill","type","addNewSkill","token","dispatch","resolve","reject","HOST","PORT","method","headers","Accept","credentials","body","then","resp","json","data","errno","error","msg","code","console","log","catch","err"],"mappings":";;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAE,UADD;AAELD,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,WAAT,CAAqBF,KAArB,EAA4BG,KAA5B,EAAmC;AACxC,SAAOC,QAAQ,IAAI;AACjB,WAAO,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,KAAK,CAAE,GAAEE,WAAW,CAACS,IAAK,IAAGT,WAAW,CAACU,IAAK,YAAzC,EAAsD;AACzDC,QAAAA,MAAM,EAAE,MADiD;AAEzDC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,mCADD;AAEP,0BAAgB;AAFT,SAFgD;AAMzDC,QAAAA,WAAW,EAAE,aAN4C;AAOzDC,QAAAA,IAAI,EAAE,gBAAe;AAAEb,UAAAA,KAAF;AAASG,UAAAA;AAAT,SAAf;AAPmD,OAAtD,CAAL,CASGW,IATH,CASQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAThB,EAUGF,IAVH,CAUQG,IAAI,IAAI;AACZ,YAAIA,IAAI,CAACC,KAAT,EAAgB;AACdZ,UAAAA,MAAM,CAAC;AAAEa,YAAAA,KAAK,EAAE,WAAT;AAAsBC,YAAAA,GAAG,EAAEH,IAAI,CAACI;AAAhC,WAAD,CAAN;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BN,IAA7B,EADK,CAEL;AACA;AACD;AACF,OAlBH,EAmBGO,KAnBH,CAmBSC,GAAG,IAAI;AACZnB,QAAAA,MAAM,CAAC;AAAEc,UAAAA,GAAG,EAAE,WAAP;AAAoBD,UAAAA,KAAK,EAAEM;AAA3B,SAAD,CAAN;AACD,OArBH;AAsBD,KAvBM,CAAP;AAwBD,GAzBD;AA0BD","sourcesContent":["const fetch = require('node-fetch')\nimport connections from '../../constants/connections'\n\nexport function addSkill(skill) {\n  return {\n    type: 'SET_USER',\n    skill,\n  }\n}\n\nexport function addNewSkill(skill, token) {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      fetch(`${connections.HOST}:${connections.PORT}/api/skill`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'same-origin',\n        body: JSON.stringify({ skill, token }),\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.errno) {\n            reject({ error: 'sql error', msg: data.code })\n          } else {\n            console.log('skill added !', data)\n            // dispatch(addSkill(data))\n            // resolve(data)\n          }\n        })\n        .catch(err => {\n          reject({ msg: 'errore :(', error: err })\n        })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}